{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","id","className","href","src","alt","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6PA6DeA,MAxDf,WACE,OACE,kBAAC,WAAD,KACE,yBAAKC,GAAG,MAAMC,UAAU,cACtB,yBAAKA,UAAU,aACb,uBAAGC,KAAK,YACN,yBAAKC,IAAI,cAAcC,IAAI,UAE7B,0CACA,6BACE,4BACE,4BAAI,uBAAGF,KAAK,kBAAR,kBACJ,4BAAI,uBAAGA,KAAK,mDAAmDG,OAAO,SAASC,IAAI,uBAA/E,eAKZ,yBAAKL,UAAU,UACb,yBAAKA,UAAU,aACb,iDAAsB,6BAAtB,aACA,+EAAoD,6BAApD,8BACA,uBAAGA,UAAU,SAASC,KAAK,6BAA3B,iBAGJ,yBAAKD,UAAU,SACb,yBAAKA,UAAU,uBACb,oCACA,+DACA,uBAAGA,UAAU,SAASC,KAAK,QAAQG,OAAO,SAASC,IAAI,uBAAvD,SAEF,yBAAKL,UAAU,oBACb,uCACA,gEAAqC,6BAArC,+BAAuE,6BAAvE,2BACA,uBAAGA,UAAU,SAASC,KAAK,eAAeG,OAAO,SAASC,IAAI,uBAA9D,gBAEF,yBAAKL,UAAU,yBACb,uCACA,oDAAyB,6BAAzB,6BAAyD,6BAAzD,4BACA,uBAAGA,UAAU,SAASC,KAAK,0DAA0DG,OAAO,SAASC,IAAI,uBAAzG,YAGJ,yBAAKL,UAAU,YACb,uBAAGC,KAAK,yBAAyBG,OAAO,SAASC,IAAI,uBAAsB,yBAAKH,IAAI,kBAAkBC,IAAI,sBAC1G,uBAAGF,KAAK,gCAAgCG,OAAO,SAASC,IAAI,uBAAsB,yBAAKH,IAAI,aAAaC,IAAI,oBCpChGG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.935d23db.chunk.js","sourcesContent":["import React from 'react';\nimport { Fragment } from 'react';\nimport './App.css';\n//import 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <Fragment>\n      <div id=\"nav\" className=\"navigation\">\n        <div className=\"container\">\n          <a href=\"/website\">\n            <img src=\"logo512.png\" alt=\"Logo\"></img>\n          </a>\n          <h1>LIGHTAINER</h1>\n          <nav>\n            <ul>\n              <li><a href=\"#documentation\">Documentation</a></li>\n              <li><a href=\"https://github.com/Lightainer-Project/Lightainer\" target=\"_blank\" rel=\"noopener noreferrer\">Github</a></li>\n            </ul>\n          </nav>\n        </div>\n      </div>\n      <div className=\"header\">\n        <div className=\"container\">\n          <h1>Manage and Deploy <br /> Services</h1>\n          <p>With Lightainer you can easily maintain, monitor <br />and configure your server.</p>\n          <a className=\"button\" href=\"/documentation#getstarted\">Get started</a>\n        </div>\n      </div>\n      <div className=\"cards\">\n        <div className=\"card primary shadow\">\n          <h1>Demo</h1>\n          <p>Check out Lightainer in our Demo</p>\n          <a className=\"button\" href=\"/demo\" target=\"_blank\" rel=\"noopener noreferrer\">Demo</a>\n        </div>\n        <div className=\"card dark shadow\">\n          <h1>Modules</h1>\n          <p>Take a look in our Marketplace to <br />check out other Modules you <br />can use with Lightainer</p>\n          <a className=\"button\" href=\"/marketplace\" target=\"_blank\" rel=\"noopener noreferrer\">Marketplace</a>\n        </div>\n        <div className=\"card secondary shadow\">\n          <h1>Support</h1>\n          <p>You got a problem with<br />Lightainer? Create a Issue<br />on Github an we can help</p>\n          <a className=\"button\" href=\"https://github.com/Lightainer-Project/Lightainer/issues\" target=\"_blank\" rel=\"noopener noreferrer\">Issues</a>\n        </div>\n      </div>\n      <div className=\"showcase\">\n        <a href=\"http://frozencloud.de/\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"frozencloud.png\" alt=\"frozencloud logo\"/></a>\n        <a href=\"https://kabema-consulting.de/\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"kabema.png\" alt=\"kabema logo\"/></a>\n      </div>\n    </Fragment>\n  );\n}\n\n/*\n      <div className=\"textbox dark\">\n        <h1></h1>\n        <p></p>\n      </div>\n*/\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}